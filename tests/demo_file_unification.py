#!/usr/bin/env python3
"""
Demo: So s√°nh c√°ch s·ª≠ d·ª•ng tools file tr∆∞·ªõc v√† sau khi h·ª£p nh·∫•t
"""

def demo_old_way():
    """Minh h·ªça c√°ch s·ª≠ d·ª•ng tools file tr∆∞·ªõc ƒë√¢y (10 tools ri√™ng l·∫ª)"""
    print("üî¥ C√ÅCH C≈® - 10 Tools Ri√™ng L·∫ª:")
    print("=" * 50)
    
    # Tr∆∞·ªõc ƒë√¢y ph·∫£i nh·ªõ v√† s·ª≠ d·ª•ng 10 tools kh√°c nhau
    print("1. ƒê·ªçc file:")
    print("   read_file(file_path='/path/file.txt', encoding='utf-8')")
    print()
    
    print("2. Ghi file:")
    print("   write_file(file_path='/path/file.txt', content='data', encoding='utf-8', create_dirs=True)")
    print()
    
    print("3. Th√™m n·ªôi dung:")
    print("   append_file(file_path='/path/file.txt', content='more data', encoding='utf-8')")
    print()
    
    print("4. X√≥a file:")
    print("   delete_file(file_path='/path/file.txt')")
    print()
    
    print("5. Di chuy·ªÉn file:")
    print("   move_file(source_path='/path/old.txt', destination_path='/path/new.txt', create_dirs=True)")
    print()
    
    print("6. Sao ch√©p file:")
    print("   copy_file(source_path='/path/file.txt', destination_path='/path/copy.txt', create_dirs=True)")
    print()
    
    print("7. Th√¥ng tin file:")
    print("   file_info(path='/path/file.txt')")
    print()
    
    print("8. Li·ªát k√™ th∆∞ m·ª•c:")
    print("   list_directory(directory_path='/path', include_hidden=False, recursive=False)")
    print()
    
    print("9. T·∫°o th∆∞ m·ª•c:")
    print("   create_directory(directory_path='/path/newdir', parents=True)")
    print()
    
    print("10. X√≥a th∆∞ m·ª•c:")
    print("    delete_directory(directory_path='/path/dir', recursive=False)")
    print()
    
    print("‚ùå Nh∆∞·ª£c ƒëi·ªÉm:")
    print("   ‚Ä¢ Ph·∫£i nh·ªõ 10 t√™n tools kh√°c nhau")
    print("   ‚Ä¢ T√™n parameters kh√¥ng nh·∫•t qu√°n (file_path vs directory_path vs path)")
    print("   ‚Ä¢ Kh√≥ s·ª≠ d·ª•ng cho ng∆∞·ªùi m·ªõi")
    print("   ‚Ä¢ Code ph·ª©c t·∫°p khi c·∫ßn nhi·ªÅu thao t√°c")
    print()

def demo_new_way():
    """Minh h·ªça c√°ch s·ª≠ d·ª•ng tool unified edit_file"""
    print("üü¢ C√ÅCH M·ªöI - 1 Tool Th·ªëng Nh·∫•t:")
    print("=" * 50)
    
    # Gi·ªù ch·ªâ c·∫ßn nh·ªõ 1 tool v·ªõi parameter operation
    print("1. ƒê·ªçc file:")
    print("   edit_file(operation='read', path='/path/file.txt', encoding='utf-8')")
    print()
    
    print("2. Ghi file:")
    print("   edit_file(operation='write', path='/path/file.txt', content='data', encoding='utf-8', create_dirs=True)")
    print()
    
    print("3. Th√™m n·ªôi dung:")
    print("   edit_file(operation='append', path='/path/file.txt', content='more data', encoding='utf-8')")
    print()
    
    print("4. X√≥a file:")
    print("   edit_file(operation='delete', path='/path/file.txt')")
    print()
    
    print("5. Di chuy·ªÉn file:")
    print("   edit_file(operation='move', path='/path/old.txt', destination='/path/new.txt', create_dirs=True)")
    print()
    
    print("6. Sao ch√©p file:")
    print("   edit_file(operation='copy', path='/path/file.txt', destination='/path/copy.txt', create_dirs=True)")
    print()
    
    print("7. Th√¥ng tin file:")
    print("   edit_file(operation='info', path='/path/file.txt')")
    print()
    
    print("8. Li·ªát k√™ th∆∞ m·ª•c:")
    print("   edit_file(operation='list', path='/path', include_hidden=False, recursive=False)")
    print()
    
    print("9. T·∫°o th∆∞ m·ª•c:")
    print("   edit_file(operation='mkdir', path='/path/newdir', create_dirs=True)")
    print()
    
    print("10. X√≥a th∆∞ m·ª•c:")
    print("    edit_file(operation='rmdir', path='/path/dir', recursive=False)")
    print()
    
    print("‚úÖ ∆Øu ƒëi·ªÉm:")
    print("   ‚Ä¢ Ch·ªâ c·∫ßn nh·ªõ 1 tool duy nh·∫•t: edit_file")
    print("   ‚Ä¢ Parameter names nh·∫•t qu√°n (lu√¥n l√† 'path')")
    print("   ‚Ä¢ D·ªÖ h·ªçc v√† s·ª≠ d·ª•ng")
    print("   ‚Ä¢ Code g·ªçn g√†ng v√† r√µ r√†ng")
    print("   ‚Ä¢ IntelliSense t·ªët h∆°n trong IDE")
    print()

def demo_workflow_comparison():
    """So s√°nh workflow th·ª±c t·∫ø"""
    print("üîÑ SO S√ÅNH WORKFLOW TH·ª∞C T·∫æ:")
    print("=" * 50)
    
    print("üìã Task: T·∫°o file config, backup, v√† cleanup")
    print()
    
    print("üî¥ C√°ch c≈© (10 tool calls):")
    print("""
    # 1. T·∫°o th∆∞ m·ª•c
    create_directory(directory_path='/app/config', parents=True)
    
    # 2. T·∫°o file config
    write_file(
        file_path='/app/config/settings.json', 
        content='{"debug": true}',
        create_dirs=True
    )
    
    # 3. Backup file
    copy_file(
        source_path='/app/config/settings.json',
        destination_path='/app/config/settings.backup.json',
        create_dirs=True
    )
    
    # 4. Ki·ªÉm tra file info
    file_info(path='/app/config/settings.json')
    
    # 5. Li·ªát k√™ ƒë·ªÉ verify
    list_directory(directory_path='/app/config', include_hidden=False)
    
    # 6. Cleanup: x√≥a backup
    delete_file(file_path='/app/config/settings.backup.json')
    """)
    
    print("üü¢ C√°ch m·ªõi (6 tool calls v·ªõi c√πng 1 tool):")
    print("""
    # 1. T·∫°o th∆∞ m·ª•c  
    edit_file(operation='mkdir', path='/app/config', create_dirs=True)
    
    # 2. T·∫°o file config
    edit_file(
        operation='write', 
        path='/app/config/settings.json',
        content='{"debug": true}',
        create_dirs=True
    )
    
    # 3. Backup file
    edit_file(
        operation='copy',
        path='/app/config/settings.json', 
        destination='/app/config/settings.backup.json',
        create_dirs=True
    )
    
    # 4. Ki·ªÉm tra file info
    edit_file(operation='info', path='/app/config/settings.json')
    
    # 5. Li·ªát k√™ ƒë·ªÉ verify
    edit_file(operation='list', path='/app/config', include_hidden=False)
    
    # 6. Cleanup: x√≥a backup
    edit_file(operation='delete', path='/app/config/settings.backup.json')
    """)
    
    print("üí° Nh·∫≠n x√©t:")
    print("   ‚Ä¢ C√πng s·ªë l∆∞·ª£ng thao t√°c nh∆∞ng interface nh·∫•t qu√°n")
    print("   ‚Ä¢ D·ªÖ ƒë·ªçc v√† hi·ªÉu code h∆°n")
    print("   ‚Ä¢ IntelliSense ch·ªâ c·∫ßn g·ª£i √Ω 1 tool")
    print("   ‚Ä¢ Error messages th·ªëng nh·∫•t")
    print()

def demo_parameter_consistency():
    """So s√°nh t√≠nh nh·∫•t qu√°n c·ªßa parameters"""
    print("üéØ T√çNH NH·∫§T QU√ÅN C·ª¶A PARAMETERS:")
    print("=" * 50)
    
    print("üî¥ C√°ch c≈© - Parameters kh√¥ng nh·∫•t qu√°n:")
    print("""
    read_file(file_path='/path')           # file_path
    write_file(file_path='/path')          # file_path  
    list_directory(directory_path='/path') # directory_path
    file_info(path='/path')                # path
    create_directory(directory_path='/path', parents=True)  # directory_path + parents
    move_file(source_path='/a', destination_path='/b')      # source_path + destination_path
    """)
    
    print("üü¢ C√°ch m·ªõi - Parameters ho√†n to√†n nh·∫•t qu√°n:")
    print("""
    edit_file(operation='read', path='/path')
    edit_file(operation='write', path='/path')
    edit_file(operation='list', path='/path')  
    edit_file(operation='info', path='/path')
    edit_file(operation='mkdir', path='/path', create_dirs=True)
    edit_file(operation='move', path='/a', destination='/b')
    """)
    
    print("‚úÖ L·ª£i √≠ch:")
    print("   ‚Ä¢ Lu√¥n lu√¥n l√† 'path' cho ƒë∆∞·ªùng d·∫´n ch√≠nh")
    print("   ‚Ä¢ 'destination' cho ƒë∆∞·ªùng d·∫´n ƒë√≠ch (n·∫øu c√≥)")
    print("   ‚Ä¢ C√°c optional parameters c√≥ t√™n nh·∫•t qu√°n")
    print("   ‚Ä¢ Kh√¥ng c·∫ßn nh·ªõ file_path vs directory_path vs path")
    print()

if __name__ == "__main__":
    print("üé™ DEMO: File Tools Unification")
    print("=" * 60)
    print()
    
    demo_old_way()
    print()
    
    demo_new_way() 
    print()
    
    demo_workflow_comparison()
    print()
    
    demo_parameter_consistency()
    
    print("üéâ K·∫øt lu·∫≠n:")
    print("   Tool edit_file th·ªëng nh·∫•t ƒë√£ ƒë∆°n gi·∫£n h√≥a ƒë√°ng k·ªÉ")
    print("   vi·ªác l√†m vi·ªác v·ªõi files t·ª´ 10 tools ‚Üí 1 tool duy nh·∫•t!")
    print("   D·ªÖ s·ª≠ d·ª•ng h∆°n, nh·∫•t qu√°n h∆°n, v√† maintainable h∆°n.")
    print()
